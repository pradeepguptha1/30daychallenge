LC 261 â€“ Graph Valid Tree
Problem Statement:

You are given:

An integer n representing the number of nodes (labeled from 0 to n-1).

A list of edges where edges[i] = [ai, bi] represents an undirected edge between nodes ai and bi.

Return true if these edges form a valid tree.

Rules for a Tree:

The graph must have exactly n - 1 edges.

The graph must be fully connected (no cycles).

//solution
class Solution {
    public boolean validTree(int n, int[][] edges) {
        if (edges.length != n - 1) return false;

        int[] parent = new int[n];
        for (int i = 0; i < n; i++) parent[i] = i;

        for (int[] edge : edges) {
            int rootA = find(parent, edge[0]);
            int rootB = find(parent, edge[1]);
            if (rootA == rootB) return false;

            parent[rootA] = rootB; // Union
        }
        return true; // fully connected & no cycles
    }

    private int find(int[] parent, int x) {
        if (parent[x] != x) parent[x] = find(parent, parent[x]); // path compression
        return parent[x];
    }
}
