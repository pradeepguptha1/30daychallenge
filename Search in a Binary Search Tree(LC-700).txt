LeetCode Problem 700: Search in a Binary Search Tree

Problem Statement:  
You are given the root of a Binary Search Tree (BST) and an integer `val`.  
Find the node in the BST where the node's value equals `val` and return the subtree rooted with that node.  
If the node does not exist, return `null`.

---

Example Test Cases:
```
Input: root = [4,2,7,1,3], val = 2
Output: [2,1,3]

Input: root = [4,2,7,1,3], val = 5
Output: []
```

---

Constraints:
- The number of nodes in the tree is in the range `[1, 5000]`.
- `1 <= Node.val <= 10^7`
- `root` is a valid Binary Search Tree.
- `1 <= val <= 10^7`

---

Complexity Analysis:  
- **Time Complexity:** O(h) – where *h* is the height of the tree. In the worst case, it can be O(n) if the tree is skewed.  
- **Space Complexity:** O(h) – recursion stack space.

---

Solution:
```java
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode searchBST(TreeNode root, int val) {
        if (root == null) return null;
        if (root.val == val) return root;
        else if (root.val > val) return searchBST(root.left, val);
        else return searchBST(root.right, val);
    }
}
```  
